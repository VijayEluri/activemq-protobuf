/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.activemq.protobuf.compiler;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import org.apache.activemq.protobuf.compiler.parser.ParseException;
import org.apache.activemq.protobuf.compiler.parser.ProtoParser;

public class JavaGenerator {

    private File outputDirectory = new File(".");

    private ProtoDescriptor proto;
    private String javaPackage;
    private String outerClassName;
    private File outputFile;
    private FileOutputStream fos;
    private PrintWriter w;
    private int indent;
    private String optimizeFor;

    public static void main(String[] args) throws ParseException, CompilerException, IOException {

        JavaGenerator generator = new JavaGenerator();
        if (args.length == 0) {
            System.out.println("No proto files specified.");
        }
        for (int i = 0; i < args.length; i++) {
            generator.compile(new File(args[i]));
        }

    }

    static public class CompilerException extends Exception {
        private final List<String> errors;

        public CompilerException(List<String> errors) {
            this.errors = errors;
        }

        public List<String> getErrors() {
            return errors;
        }
    }

    public void compile(File file) throws ParseException, CompilerException, IOException {

        // Parse the proto file
        FileInputStream is = new FileInputStream(file);
        try {
            ProtoParser parser = new ProtoParser(is);
            proto = parser.ProtoDescriptor();
        } finally {
            is.close();
        }

        // Check for errors in the proto definition
        List<String> errors = new ArrayList<String>();
        proto.validate(errors);
        if (!errors.isEmpty()) {
            throw new CompilerException(errors);
        }

        // Load the options..
        javaPackage = getOption(proto, "java_package", null);
        outerClassName = getOption(proto, "java_outer_classname", uCamel(removeFileExtension(file.getName())));
        optimizeFor = getOption(proto, "optimize_for", "SPEED");

        // Figure out the java file name..
        outputFile = outputDirectory;
        if (javaPackage != null) {
            String packagePath = javaPackage.replace('.', '/');
            outputFile = new File(outputFile, packagePath);
        }
        outputFile = new File(outputFile, outerClassName + ".java");

        // Start writing the output file..
        outputFile.getParentFile().mkdirs();
        fos = new FileOutputStream(outputFile);
        try {
            w = new PrintWriter(fos);
            generateProtoFile();
            w.flush();
        } finally {
            fos.close();
        }
    }


    private void generateProtoFile() {
        generateFileHeader();
        if (javaPackage != null) {
            p("package " + javaPackage + ";");
            p("");
        }

        p("public class " + outerClassName + " {");
        indent();

        for (MessageDescriptor m : proto.getMessages().values()) {
            generateMessageBean(m);
        }

        unindent();
        p("}");
    }

    private void generateFileHeader() {
        p("//");
        p("// Generated by protoc, do not edit by hand.");
        p("//");
    }

    private void generateMessageBean(MessageDescriptor m) {
        
        String className = uCamel(m.getName());
        p();
        p("public static final class " + className + " {");
        p();
        p("private int memoizedSerializedSize = -1;");
        p();

        indent();
        for (MessageDescriptor subMessage : m.getMessages().values()) {
            generateMessageBean(subMessage);
        }

        for (FieldDescriptor field : m.getFields().values()) {
            generateFieldAccessor(field);
        }
        
        for (EnumDescriptor enumType : m.getEnums().values()) {
            generateEnum(enumType);
        }

        p("public final boolean isInitialized() {");
        indent();
        for (FieldDescriptor field : m.getFields().values()) {
            String uname = uCamel(field.getName());
            if( field.isRequired() ) {
                p("if(  !has" + uname + "() ) {");
                p("   return false;");
                p("}");
            }
        }
        p("return true;");
        unindent();
        p("}");
        p();

        
        p("public final void clear() {");
        indent();
        p("memoizedSerializedSize=-1;");
        for (FieldDescriptor field : m.getFields().values()) {
            String uname = uCamel(field.getName());
            p("clear" + uname + "();");
        }
        unindent();
        p("}");
        p();
        
        
        p("public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {");
        indent();
        for (FieldDescriptor field : m.getFields().values()) {
            String uname = uCamel(field.getName());
            p("if (has"+uname+"()) {");
            indent();
            if( field.isStringType() ) {
                p("output.writeString("+field.getTag()+", get"+uname+"());");
            } else if(field.isInteger32Type()) {
            }
            //TODO: finish this up.
            unindent();
            p("}");
        }
        // TODO: handle unknown fields
        // getUnknownFields().writeTo(output);
        p("}");
        p();
        
        p("public int getSerializedSize() {");
        indent();
        p("if (memoizedSerializedSize != -1)");
        p("   return memoizedSerializedSize;");
        p();
        p("int size = 0;");
        for (FieldDescriptor field : m.getFields().values()) {
            String uname = uCamel(field.getName());
            p("if (has"+uname+"()) {");
            indent();
            if( field.isStringType() ) {
                p("size += com.google.protobuf.CodedOutputStream.computeStringSize("+field.getTag()+", get"+uname+"());");;
            } else if(field.isInteger32Type()) {
            }
            //TODO: finish this up.
            unindent();
            p("}");
        }
        // TODO: handle unknown fields
        // size += getUnknownFields().getSerializedSize();");
        p("memoizedSerializedSize = size;");
        p("return size;");
        unindent();
        p("}");
        p();
        
        p("public "+className+" clone() {");
        p("   return new "+className+"().mergeFrom(this);");
        p("}");
        p();

        p("public "+className+" mergeFrom("+className+" other) {");
        indent();
        for (FieldDescriptor field : m.getFields().values()) {
            String uname = uCamel(field.getName());
            p("if (has"+uname+"()) {");
            indent();
            p("set"+uname+"(other.get"+uname+"());");
            unindent();
            p("}");
        }
        unindent();
        p("}");
        p();

        p("public "+className+" mergeFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {");
        p("    return mergeFrom(input, com.google.protobuf.ExtensionRegistry.getEmptyRegistry());");
        p("}");

        p("public "+className+" mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistry extensionRegistry) throws java.io.IOException {");
        indent(); {
          //TODO: handle unknown fields
          // UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder(this.unknownFields);
            
          p("while (true) {");
          indent(); {
              p("int tag = input.readTag();");
              p("switch (tag) {");
              p("case 0:");
              p("   this.setUnknownFields(unknownFields.build());");
              p("   return this;");
              p("default: {");
              
              //TODO: handle unknown field types.
//              p("   if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {");
//              p("       this.setUnknownFields(unknownFields.build());");
//              p("       return this;");
//              p("   }");
              
              p("   break;");
              p("}");
              for (FieldDescriptor field : m.getFields().values()) {
                  String uname = uCamel(field.getName());
                  p("case "+field.getTag()+":");
                  indent();
                  if( field.isStringType() ) {
                      p("set"+uname+"(input.readString());");
                  }
                  //TODO: do the rest of the types...
                  p("break;");
                  unindent();
              }              
              p("}");
          } unindent();
          p("}"); 
        } unindent();
        p("}");


        unindent();
        p("}");
        p();
    }

    /**
     * @param field
     */
    private void generateFieldAccessor(FieldDescriptor field) {
        String lname = lCamel(field.getName());
        String uname = uCamel(field.getName());
        String type = javaType(field);
        String typeDefault = javaTypeDefault(field);
        boolean primitive = isPrimitive(field);

        // Create the fields..
        p("// " + field.getRule() + " " + field.getType() + " " + field.getName() + " = " + field.getTag() + ";");
        p("private " + type + " f_" + lname + ";");
        if (primitive) {
            p("private boolean b_" + lname + ";");
        }
        p();

        // Create the field accessors
        p("public boolean has" + uname + "() {");
        indent();
        if (primitive) {
            p("return this.b_" + lname + ";");
        } else {
            p("return this.f_" + lname + "!=null;");
        }
        unindent();
        p("}");
        p();

        p("public " + type + " get" + uname + "() {");
        indent();
        p("return this.f_" + lname + ";");
        unindent();
        p("}");
        p();

        p("public void set" + uname + "(" + type + " " + lname + ") {");
        indent();
        if (primitive) {
            p("this.b_" + lname + " = true;");
        }
        p("this.f_" + lname + " = lname;");
        unindent();
        p("}");

        p("public void clear" + uname + "() {");
        indent();
        if (primitive) {
            p("this.b_" + lname + " = false;");
        }
        p("this.f_" + lname + " = " + typeDefault + ";");
        unindent();
        p("}");
    }

    private String javaTypeDefault(FieldDescriptor field) {
//        OptionDescriptor defaultOption = field.getOptions().get("default");
        if( field.isNumberType() ) {
            return "0";
        }
        if( field.getType() == FieldDescriptor.BOOL_TYPE ) {
            return "false";
        }
        return "null";
    }
    
    private void generateEnum(EnumDescriptor ed) {
        String uname = uCamel(ed.getName());

        // TODO Auto-generated method stub
        p();
        p("public static enum " +uname + " {");
        indent();
        
        
        p();
        int counter=0;
        for (EnumFieldDescriptor field : ed.getFields().values()) {
            boolean last = counter+1 == ed.getFields().size();
            p(field.getName()+"("+counter+", "+field.getValue()+")"+(last?";":",")); 
            counter++;
        }
        p();
        p("private final int index;");
        p("private final int value;");
        p();
        p("private "+uname+"(int index, int value) {");
        p("   this.index = index;");
        p("   this.value = value;");
        p("}");
        p();
        p("public final int getNumber() {");
        p("   return value;");
        p("}");
        p();
        p("public static "+uname+" valueOf(int value) {");
        p("   switch (value) {");
        for (EnumFieldDescriptor field : ed.getFields().values()) {
            p("   case "+field.getValue()+":");
            p("      return "+field.getName()+";");
        }
        p("   default:");
        p("      return null;");
        p("   }");
        p("}");
        
        
        unindent();
        p("}");
        p();
    }


    private boolean isPrimitive(FieldDescriptor field) {
        return field.isNumberType() || field.getType()==FieldDescriptor.BOOL_TYPE;
    }

    private String javaType(FieldDescriptor field) {
        if( field.isInteger32Type() ) {
            return "int";
        }
        if( field.isInteger64Type() ) {
            return "long";
        }
        if( field.getType() == FieldDescriptor.DOUBLE_TYPE ) {
            return "double";
        }
        if( field.getType() == FieldDescriptor.FLOAT_TYPE ) {
            return "float";
        }
        if( field.getType() == FieldDescriptor.STRING_TYPE ) {
            return "java.lang.String";
        }
        if( field.getType() == FieldDescriptor.BYTES_TYPE ) {
            return "com.google.protobuf.ByteString";
        }
        if( field.getType() == FieldDescriptor.BOOL_TYPE ) {
            return "boolean";
        }
        return field.getType();
    }

    // ----------------------------------------------------------------
    // Internal Helper methods
    // ----------------------------------------------------------------

    private void indent() {
        indent++;
    }

    private void unindent() {
        indent--;
    }

    private void p(String line) {
        // Indent...
        for (int i = 0; i < indent; i++) {
            w.print("   ");
        }
        // Then print.
        w.println(line);
    }

    private void p() {
        w.println();
    }

    private String getOption(ProtoDescriptor proto, String optionName, String defaultValue) {
        OptionDescriptor optionDescriptor = proto.getOptions().get(optionName);
        if (optionDescriptor == null) {
            return defaultValue;
        }
        return optionDescriptor.getValue();
    }

    static private String removeFileExtension(String name) {
        return name;
    }

    static private String uCamel(String name) {
        return name;
    }

    static private String lCamel(String name) {
        return name;
    }

    public File getOutputDirectory() {
        return outputDirectory;
    }

    public void setOutputDirectory(File outputDirectory) {
        this.outputDirectory = outputDirectory;
    }
}
